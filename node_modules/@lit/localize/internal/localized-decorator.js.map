{"version":3,"file":"localized-decorator.js","sourceRoot":"","sources":["../src/internal/localized-decorator.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,uBAAuB,EAAC,MAAM,2BAA2B,CAAC;AAQlE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,UAAU,GACd,GAAG,EAAE,CAAC,CAAC,iBAAiE,EAAE,EAAE,CAC1E,OAAO,iBAAiB,KAAK,UAAU;IACrC,CAAC,CAAC,eAAe,CAAC,iBAAsD,CAAC;IACzE,CAAC,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;AAE7C,MAAM,CAAC,MAAM,SAAS,GAElB,UAAU,CAAC;AAEf,MAAM,iBAAiB,GAAG,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAkB,EAAE,EAAE;IAC9D,OAAO;QACL,IAAI;QACJ,QAAQ;QACR,QAAQ,CAAC,KAA6B;YACpC,KAAK,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;QAChD,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAA6B,EAAE,EAAE;IACxD,KAAK,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9C,8DAA8D;IAC9D,OAAO,KAAY,CAAC;AACtB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {updateWhenLocaleChanges} from './localized-controller.js';\n\nimport type {ReactiveElement} from '@lit/reactive-element';\nimport type {\n  Constructor,\n  ClassDescriptor,\n} from '@lit/reactive-element/decorators/base.js';\n\n/**\n * Class decorator to enable re-rendering the given LitElement whenever a new\n * active locale has loaded.\n *\n * See also {@link updateWhenLocaleChanges} for the same functionality without\n * the use of decorators.\n *\n * When using lit-localize in transform mode, applications of this decorator are\n * removed.\n *\n * Usage:\n *\n *   import {LitElement, html} from 'lit';\n *   import {customElement} from 'lit/decorators.js';\n *   import {msg, localized} from '@lit/localize';\n *\n *   @localized()\n *   @customElement('my-element')\n *   class MyElement extends LitElement {\n *     render() {\n *       return html`<b>${msg('Hello World')}</b>`;\n *     }\n *   }\n */\nconst _localized =\n  () => (classOrDescriptor: Constructor<ReactiveElement> | ClassDescriptor) =>\n    typeof classOrDescriptor === 'function'\n      ? legacyLocalized(classOrDescriptor as unknown as typeof ReactiveElement)\n      : standardLocalized(classOrDescriptor);\n\nexport const localized: typeof _localized & {\n  _LIT_LOCALIZE_DECORATOR_?: never;\n} = _localized;\n\nconst standardLocalized = ({kind, elements}: ClassDescriptor) => {\n  return {\n    kind,\n    elements,\n    finisher(clazz: typeof ReactiveElement) {\n      clazz.addInitializer(updateWhenLocaleChanges);\n    },\n  };\n};\n\nconst legacyLocalized = (clazz: typeof ReactiveElement) => {\n  clazz.addInitializer(updateWhenLocaleChanges);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return clazz as any;\n};\n"]}