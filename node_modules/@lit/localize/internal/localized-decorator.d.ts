/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import type { ReactiveElement } from '@lit/reactive-element';
import type { Constructor, ClassDescriptor } from '@lit/reactive-element/decorators/base.js';
/**
 * Class decorator to enable re-rendering the given LitElement whenever a new
 * active locale has loaded.
 *
 * See also {@link updateWhenLocaleChanges} for the same functionality without
 * the use of decorators.
 *
 * When using lit-localize in transform mode, applications of this decorator are
 * removed.
 *
 * Usage:
 *
 *   import {LitElement, html} from 'lit';
 *   import {customElement} from 'lit/decorators.js';
 *   import {msg, localized} from '@lit/localize';
 *
 *   @localized()
 *   @customElement('my-element')
 *   class MyElement extends LitElement {
 *     render() {
 *       return html`<b>${msg('Hello World')}</b>`;
 *     }
 *   }
 */
declare const _localized: () => (classOrDescriptor: Constructor<ReactiveElement> | ClassDescriptor) => any;
export declare const localized: typeof _localized & {
    _LIT_LOCALIZE_DECORATOR_?: never;
};
export {};
//# sourceMappingURL=localized-decorator.d.ts.map